// ConsoleApplication3.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

//--------------------------------------------------
#include "dsp_types.h"
#include "dsp_tickcount.h"
#include "dsp_log.h"
#include "dsp_math.h"
#include "dsp_channel_matrix.h"
#include "dsp_map.h"
#include "dsp_demap.h"
#include "dsp_crc.h"
#include "dsp_processor.h"
#include "dsp_cmd.h"
#include "dsp_vector1.h"
#include "dsp_source.h"
#include "dsp_draw.h"
#include "dsp_console.h"

#define USER_MODE
#include "sora.h"

#define enable_draw 0
#define enable_dbgplot 1
#include "DebugPlotU.h"
//--------------------------------------------------
#include "TBlock.h"
#include "TObject.h"
#include "TOP.h"
#include "TTask.h"
#include "TMain.h"
#include "TParallel.h"
#include "TPipeline.h"
#include "TSchedule.h"
#include "TOnce.h"
#include "TArray.h"
#include "TChannel.h"
#include "TThread.h"
#include "TReset.h"

//--------------------------------------------------
#include "b_hw_source.h"
#include "b_hw_sink.h"
#include "b_plot.h"
#include "b_producer.h"
#include "b_consumer.h"
#include "b_passthru.h"
#include "b_wait.h"
#include "b_dot11n_param.h"

#include "b_awgn.h"

#include "b_drop.h"
#include "b_file_source.h"
#include "b_moving_energy.h"
#include "b_auto_corr.h"

#include "b_noise_estimator.h"
#include "b_lstf_searcher.h"
#include "b_frequest_offset.h"
#include "b_fft.h"
#include "b_channel_estimator.h"
#include "b_channel_compensator.h"
#include "b_remove_gi.h"
#include "b_pilot_tracking.h"
#include "b_demap.h"
#include "b_mrc_combine.h"
#include "b_deinterleave.h"
#include "b_viterbi.h"
#include "b_lsig_parser.h"
#include "b_htsig_parser.h"
#include "b_mimo_channel_estimator.h"
#include "b_mimo_channel_compensator.h"
#include "b_stream_joiner.h"
#include "b_descramble.h"
#include "b_crc.h"
#include "b_socket.h"


//////////////////////////////////////////////////////////////////////////
#include "b_dot11_frame_source.h"
#include "b_dot11n_scramble.h"
#include "b_conv.h"
#include "b_stream_parser.h"

#include "b_dot11a_interleave.h"
#include "b_dot11n_interleave.h"

#include "b_dot11a_map.h"
#include "b_dot11n_map.h"

#include "b_dot11n_lstf.h"
#include "b_dot11n_lltf.h"
#include "b_dot11n_htstf.h"
#include "b_dot11n_htltf.h"
#include "b_dot11n_lsig.h"
#include "b_dot11n_htsig.h"
#include "b_dot11n_tx_ifft.h"
#include "b_dot11a_add_pilot.h"
#include "b_dot11n_add_pilot.h"
#include "b_dot11n_csd.h"
#include "b_dot11n_add_cp.h"
#include "b_dot11n_dma_join.h"


//#define split(T, ...) new (aligned_malloc<T>()) T(__VA_ARGS__)



//----------------------------------
#define dot11n_test 1
#include "b_dot11n_rx.h"
//#include "b_dot11n_rx_profile.h"
//#include "b_dot11n_tx.h"

//#include "b_mumimo_2x2_tx.h"
#include "b_mumimo_4x4_tx.h"
#include "b_mumimo_4x4_rx.h"




BOOL WINAPI HandlerRoutine(__in  DWORD dwCtrlType)
{
  ConsoleEvent(dwCtrlType) << cout;

  switch (dwCtrlType)
  {
  case CTRL_C_EVENT:
  case CTRL_BREAK_EVENT:
  case CTRL_CLOSE_EVENT:
    ExitProcess(0);
    return true;// we handle the msg
  default:
    return false;
  }
}



void pipeline_profiling()
{
  tick_count t1, t2, t;
  autoref producer = create_block<b_producer_v1>(2, string("nItemsEach=4"), string("nItemsTotal=6400000"));
  autoref consumer = create_block<b_consumer_v1>();

  Channel::Create(sizeof(uint8)).from(producer, 0).to(consumer, 0);

  int nItemsTotal = 6400000;
  for (int nItemsEach = 4; nItemsEach < 4096; nItemsEach += 4)
  {
    *producer.nItemsEach  = nItemsEach;
    *producer.nItemsTotal = nItemsTotal;
    *producer.nItemsLeft  = nItemsTotal;

    t1 = tick_count::now();
    PIPE_LINE(producer, consumer);
    t2 = tick_count::now();
    t = t2 - t1;
    printf("Pipeline producer & consumer: %f us, %d bytes, %f Mbps\n", t.us(), nItemsEach, nItemsTotal * 8.0 / t.us());
  }
}


#define fft_size 1024

vcs fft_input[fft_size/4];
vcs fft_output[fft_size/4];


template<int N>
DSP_INLINE1 void PFFT(vcs * pInput, vcs * pOutput)
{
  const int nArray = N / vcs::size;

  FFTSSE<N> (pInput);

  PARALLEL([&]{
    FFTSSEEx<N/4> (pInput);
    FFTSSEEx<N/4> (pInput + nArray / 4);
  },[&]{
    FFTSSEEx<N/4> (pInput + nArray / 2);
    FFTSSEEx<N/4> (pInput + nArray / 4 * 3);
  });

  int i;
  for (i = 0; i < N; i++)
    ((COMPLEX16*)pOutput)[i] = ((COMPLEX16*)pInput) [FFTLUTMapTable<N>(i)];
}


void fft_test()
{
  tick_count t1, t2, t;
  t1 = tick_count::now();
  for (int i = 0; i < 100000; i++)
  {
    FFT<fft_size>(fft_input, fft_output);
  }  
  t2 = tick_count::now();
  t = t2 - t1;
  printf("fft single: %f us\n", t.us() /  100000.0);

  //------------------------
  t1 = tick_count::now();
  for (int i = 0; i < 100000; i++)
  {
    PFFT<fft_size>(fft_input, fft_output);
  }
  t2 = tick_count::now();
  t = t2 - t1;
  printf("pfft single: %f us\n", t.us() /  100000.0);
}


void hw_plot()
{
  autoref hwsrc = create_block<b_hw_source_v1>();
  autoref plot  = create_block<b_plot_1v>();

  Channel::Create(sizeof(v_cs)).from(hwsrc, 0).to(plot, 0);

  START(hwsrc, plot);
}


void hw_sink(int argc, _TCHAR* argv[])
{
  dsp_cmd cmdline;
  cmdline.parse(argc, argv);


  string strFileName = string("FileName=c:\\mimo_tx_0.dmp");
  auto CmdArg = cmdline.get("FileName");
  if ( CmdArg.exist() )
  {
    strFileName = "FileName=" + CmdArg.as_string();
  }

  printf("|- %s\n", strFileName.c_str());

  autoref txsrc  = create_block<b_tx_file_source_v1>(1, strFileName);
  autoref hwsink = create_block<b_hw_sink_1v>();

  Channel::Create(sizeof(v_cb), 128 * 1024).from(txsrc, 0).to(hwsink, 0);

  dsp_main( [&]{START(txsrc, hwsink);} ); 
}


class T_LSTF
{
  static const complex16 czero;
  static const complex16 cpos;
  static const complex16 cneg;
public:
  static const complex16 values[144];
};

const complex16 T_LSTF::czero(0, 0);
const complex16 T_LSTF::cpos(203, 203);
const complex16 T_LSTF::cneg(-203, -203);
const complex16 T_LSTF::values[] =
{
  // 14 zero
  czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	
  //
  // -58 58
  czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,																				
  cneg	,	czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,								
  cneg	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	 cpos	,														
  czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,	 cpos	,
  czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,										
  cneg	,	czero	,	czero	,	czero	,	cneg	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	 cpos	,	czero	,	czero	,	czero	,	 cpos	,														
  czero	,	czero	,	czero	,	 cpos	,	czero	,	czero ,
  // 13 zero
  czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	
  //
};

class T_LLTF
{
  static const complex16 czero;
  static const complex16 cpos;
  static const complex16 cneg;
public:
  static const complex16 values[144];
};

const complex16 T_LLTF::czero(0, 0);
const complex16 T_LLTF::cpos(138, 0);
const complex16 T_LLTF::cneg(-138, 0);
const complex16 T_LLTF::values[] =
{
  // 14 zero
  czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	
  //
  // -58 58
  cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cpos	,	cneg	,	cpos	,	cneg	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cpos	,	cneg	,	cpos	,
  cneg	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cpos	,	cneg	,	cpos	,	cneg	,	cpos	,	cneg	,	cneg	,	cneg	,	cneg	,
  cneg	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cneg	,	cpos	,	cneg	,	cpos	,	cpos	,	cpos	,	cpos	,	cneg	,	cneg	,	cneg	,	cpos	,	czero	,	czero	,	czero	,	cneg	,
  cpos	,	cpos	,	cneg	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cpos	,	cneg	,	cpos	,	cneg	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cpos	,
  cneg	,	cpos	,	cneg	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cpos	,	cneg	,	cpos	,	cneg	,	cpos	,	cneg	,	cneg	,	cneg	,
  cneg	,	cneg	,	cpos	,	cpos	,	cneg	,	cneg	,	cpos	,	cneg	,	cpos	,	cneg	,	cpos	,	cpos	,	cpos	,	cpos	,
  // 13 zero
  czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero	,	czero
  //
};

void dot11af_gen_lstf(ULONG FreqSeg)
{
  const int N  = 1024;
  const int NV = N / v_cs::elem_cnt;

  v_cs FreqDomain[NV];
  v_cs TimeDomain[NV];

  v_i  FreqPower[NV];
  v_i  TimePower[NV];

  ZeroMemory(FreqDomain, NV * v_cs::size);
  ZeroMemory(TimeDomain, NV * v_cs::size);

  complex16* pFirstSegment = (complex16*)FreqDomain;
  pFirstSegment += (1024 - 144);

  complex16* pSecondSegment = (complex16*)FreqDomain;
  pFirstSegment += 0;

  if (FreqSeg & 0x1)
  {
    memcpy(pFirstSegment,  T_LSTF::values, sizeof(T_LSTF::values));
  }
  if (FreqSeg & 0x2)
  {
    memcpy(pSecondSegment, T_LSTF::values, sizeof(T_LSTF::values));
  }

  for (int i = 0; i < NV; i++)
  {
    FreqPower[i] = FreqDomain[i].v_sqr2i();
  }
  

  IFFT_WONORM<N>(FreqDomain, TimeDomain);


  FFT<N>((vcs*)TimeDomain, (vcs*)FreqDomain);


  for (int i = 0; i < NV; i++)
  {
    TimePower[i] = FreqDomain[i].v_sqr2i();
  }

  PlotSpectrum("FreqPower", (int*)FreqPower, N);
  PlotSpectrum("TimePower", (int*)TimePower, N);
}

void dot11af_gen_lltf(ULONG FreqSeg)
{
  const int N  = 1024;
  const int NV = N / v_cs::elem_cnt;

  v_cs FreqDomain[NV];
  v_cs TimeDomain[NV];

  v_i  FreqPower[NV];
  v_i  TimePower[NV];

  ZeroMemory(FreqDomain, NV * v_cs::size);
  ZeroMemory(TimeDomain, NV * v_cs::size);

  complex16* pFirstSegment = (complex16*)FreqDomain;
  pFirstSegment += (1024 - 144);

  complex16* pSecondSegment = (complex16*)FreqDomain;
  pFirstSegment += 0;

  if (FreqSeg & 0x1)
  {
    memcpy(pFirstSegment,  T_LLTF::values, sizeof(T_LLTF::values));
  }
  if (FreqSeg & 0x2)
  {
    memcpy(pSecondSegment, T_LLTF::values, sizeof(T_LLTF::values));
  }

  for (int i = 0; i < NV; i++)
  {
    FreqPower[i] = FreqDomain[i].v_sqr2i();
  }


  IFFT_WONORM<N>(FreqDomain, TimeDomain);


  FFT<N>((vcs*)TimeDomain, (vcs*)FreqDomain);

  for (int i = 0; i < NV; i++)
  {
    TimePower[i] = FreqDomain[i].v_sqr2i();
  }

  PlotSpectrum("LLTF:FreqPower", (int*)FreqPower, N);
  PlotSpectrum("LLTF:TimePower", (int*)TimePower, N);
}

int __cdecl _tmain(int argc, _TCHAR* argv[])
{
  dsp_cmd cmdline;
  cmdline.parse(argc, argv);
  
  SetConsoleCtrlHandler(HandlerRoutine, true);
  SetThreadAffinityMask(GetCurrentThread(), 1);

  if (dsp_sysconfig::Instance()->GetCPUProcessorCount() > 2)
  {
    SetPriorityClass(GetCurrentProcess(), HIGH_PRIORITY_CLASS);
  }

  //SetPriorityClass(GetCurrentProcess(), REALTIME_PRIORITY_CLASS);
  //SetThreadPriority(GetCurrentThread(), THREAD_PRIORITY_TIME_CRITICAL);

#if enable_dbgplot
  ::DebugPlotInit();
#endif

#if 0
  auto tx_main = [&]
  {
    dot11n_2x2_tx(argc, argv);
  };

  auto rx_main = [&]
  {
    dot11n_2x2_rx_profile(argc, argv);
  };

  dsp_main(rx_main);
#endif

  dsp_console::info("info %d\n", GetTickCount());
  dsp_console::warning("warning %d\n", GetTickCount());
  dsp_console::error("error %d\n", GetTickCount());

  auto mumimo_tx_main = [&]
  {
<<<<<<< HEAD
    //bigap_4x4_tx(argc, argv);
=======
    mumimo_4x4_tx(argc, argv);
>>>>>>> 13bb1816a80d7c97a66d8de3696edfdf1b6780fa
  };

  auto mumimo_rx_main = [&]
  {
<<<<<<< HEAD
    //bigap_4x4_rx(argc, argv);
=======
    mumimo_4x4_rx(argc, argv);
>>>>>>> 13bb1816a80d7c97a66d8de3696edfdf1b6780fa
  };

#if 0
  if (cmdline.get("source").exist())
  {
    //test_source_sock();
    bigap_4x4_rx_back_end(argc, argv);
  }
  else if (cmdline.get("sink").exist())
  {
    //test_sink_sock();
    bigap_4x4_rx_front_end(argc, argv);
  }
  else
  {
    printf("Invalid socket type...\n");
  }
#endif
  
<<<<<<< HEAD
  //dsp_main(mumimo_tx_main);
  //dsp_main(mumimo_rx_main);
=======
  dsp_main(mumimo_rx_main);
  //dsp_main(fft_test);
>>>>>>> 13bb1816a80d7c97a66d8de3696edfdf1b6780fa
  //dsp_main(pipeline_profiling);
  //dsp_main(hw_plot);
  //hw_sink(argc,argv);
  
#if 0
  if ( cmdline.get("rx").exist() )
  {
    dsp_main(mumimo_rx_main);
  }
  else if ( cmdline.get("tx").exist() )
  {
    dsp_main(mumimo_tx_main);
  }
  else
  {
    printf("invalid arguments....\n");
  }
#endif
#if enable_dbgplot
  ::DebugPlotDeinit();
#endif

  ExitProcess(0);
  exit(0); 
	return 0;
}

